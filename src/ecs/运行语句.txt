运行本地测试
python ecs.py TrainData_2015.1.1_2015.2.19.txt input_5flavors_cpu_7days.txt output.txt
python ecs.py TrainData_2015.1.1_2015.2.19.txt input_15flavors_cpu_7days.txt output.txt

运行打包程序
tar -czvf my.tar.gz  src/


或者
tar -czvf my.tar.gz src/ecs/ecs.py src/ecs/learn/*.py src/ecs/ecs.py src/ecs/linalg/*.py src/ecs/ecs.py src/ecs/predictions/*.py src/ecs/backpack.py src/ecs/ensemble.py src/ecs/load_data.py src/ecs/metrics.py src/ecs/model_selection.py src/ecs/preprocessing.py src/ecs/utils.py


tar -czvf my.tar.gz src/ecs/*.py src/ecs/learn/*.py src/ecs/ecs.py src/ecs/linalg/*.py src/ecs/ecs.py src/ecs/predictions/*.py


src/ecs/paramater/*.*


new:
tar -czvf day15_26.tar.gz  src/ecs/ecs.py src/ecs/predictor.py src/ecs/utils.py src/ecs/backpack.py src/ecs/paramater.py  src/ecs/linalg/*.py src/ecs/learn/*.py src/ecs/load_data.py src/ecs/preprocessing.py


运行批量评测
python evaluate.py train
python evaluate.py test


C:/python27/python.exe evaluate_TestData_2015.2.20_2015.2.27_TrainData_2015.1.1_2015.2.19.py


# def template(ecs_logs,flavors_unique,training_start_time,training_end_time,predict_start_time,predict_end_time):
#     # modify @ 2018-03-15 
#     predict = {}.fromkeys(flavors_unique)
#     for f in flavors_unique:
#         predict[f] = 0
#     virtual_machine_sum = 0
#     mapping_index = get_flavors_unique_mapping(flavors_unique)
#     predict_days = (predict_end_time-predict_start_time).days
#     N = 3
#     X_train,Y_train,X_test  = resample(ecs_logs,flavors_unique,training_start_time,predict_start_time,frequency='{}d'.format(predict_days),N=N,argumentation=False,get_flatten=True)
#     from load_data import load_data
#     X_train_old,Y_train_old = load_data(flavors_unique,frequency='{}d'.format(predict_days),weekday_align=predict_end_time,N=N,argumentation=False,which=[0,2],get_flatten=True)
#     # from preprocessing import normalize
#     # X_train,norm = normalize(X_train,norm='l1',axis=1,return_norm=True)
#     # norm_inv = [0 if x==0 else 1/float(x)for x in norm]
#     # X_test = multiply(X_test,norm_inv)
#     ridge = Ridge_Single(alpha=1)
#     ridge.fit(X_train,Y_train)
#     result = ridge.predict(X_test)[0]
#     result = [0 if r<0 else r for r in result]
#     for f in flavors_unique:
#         p = result[mapping_index[f]]
#         predict[f] = int(round(p))
#         virtual_machine_sum += int(round(p))
#     return predict,virtual_machine_sum